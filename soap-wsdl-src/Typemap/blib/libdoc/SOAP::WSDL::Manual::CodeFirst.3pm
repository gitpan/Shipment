.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SOAP::WSDL::Manual::CodeFirst 3"
.TH SOAP::WSDL::Manual::CodeFirst 3 "2010-10-06" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "Writing Code-First Web Services with SOAP::WSDL"
.IX Header "Writing Code-First Web Services with SOAP::WSDL"
\&\fBNote: This document is just a collection of thought. There's no implementation yet\fR.
.SS "How Data Class definitions could look like"
.IX Subsection "How Data Class definitions could look like"
\fIMoose\fR
.IX Subsection "Moose"
.PP
Of course \s-1SOAP::WSDL\s0 could (and probably should) just use Moose \- it provides the full
Metaclass Framework needed for generating Schemas from class definitions.
.PP
However, Moose is way too powerful for building (just) simple Data Transfer Objects which
can be expressed in \s-1XML\s0.
.PP
With Moose, a class could look like this:
.PP
.Vb 2
\& package MyElements::GenerateBarCode;
\& use Moose;
\&
\& has \*(Aqxmlns\*(Aq =>
\&     is => \*(Aqro\*(Aq,
\&     default => \*(Aqhttp://webservicex.net\*(Aq;
\&
\& has \*(Aqxmlname\*(Aq =>
\&     is => \*(Aqro\*(Aq,
\&     default => \*(AqGenerateBarCode\*(Aq;
\&
\& has \*(AqBarCodeParam\*(Aq =>
\&      is => \*(Aqrw\*(Aq,
\&      type => \*(AqMyTypes::BarCodeData\*(Aq;
\&
\& has \*(AqBarCodeText\*(Aq =>
\&      is => \*(Aqrw\*(Aq,
\&      type => \*(AqString\*(Aq;
\& 1;
.Ve
.PP
This is \- despite the condensed syntax \- a lot of line noise.
.PP
\fINative \s-1SOAP::WSDL\s0\fR
.IX Subsection "Native SOAP::WSDL"
.PP
SOAP::WSDL::XSD::Typelib::ComplexType (should) provide a simple setup method allowing a even shorter
description (and offering the additional performance boost \s-1SOAP::WSDL\s0 has over Moose):
.PP
.Vb 4
\& package MyElements::GenerateBarCode;
\& use strice; use warnings;
\& use SOAP::WSDL::XSD::Typelib::Element;
\& use SOAP::WSDL::XSD::Typelib::ComplexType;
\&
\& _namespace \*(Aqhttp://webservicex.net\*(Aq;    # might be better in the SOAP server interface
\& _name \*(AqGenerateBarCode\*(Aq;
\& _elements
\&         BarCodeParam => \*(AqMyTypes::BarCodeData\*(Aq,
\&         BarCodeText => \*(Aqstring\*(Aq;
.Ve
.PP
This would result in the following \s-1XML\s0 Schema (inside a schema with the namespace
\&\*(L"http://webservicex.net\*(R" \- the namespaces could even be declared outside the \s-1DTO\s0 classes.
.PP
.Vb 6
\& <complexType name="GenerateBarCode">
\&      <sequence>
\&           <element name="BarCodeParam" type="tns:BarCodeData"/>
\&           <element name="BarCodeText" type="xsd:string"/>
\&      </sequence>
\& </complexType>
.Ve
.SS "Interface definitions"
.IX Subsection "Interface definitions"
Perl does not have the concept of interfaces. However, Moose provides Roles, which can be used for defining
interfaces.
.PP
However, it's not really necessary to define a interface Interface (in the sense of a Jave interface) \-
a interface class is sufficient.
.PP
Subroutine attributes could be used for providing additional information \- attributes in perl are much like
annotations in Java
.PP
A interface could look like this:
.PP
.Vb 3
\& package MyServer::BarCode;
\& use strict; use warnings;
\& use SOAP::WSDL::Server::CodeFirst;
\&
\& sub generateBarCode :WebMethod(name=<GenerateBarCode>
\&     return=<MyElements::GenerateBarcodeResponse>
\&     body=<MyElements::GenerateBarcode>) {
\&     my ($self, $body, $header) = @_;
\&     my $result = MyElements::GenerateBarcodeResponse\->new();
\&     return $result;
\& };
\& 1;
.Ve
