.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SOAP::WSDL::Generator::Iterator::WSDL11 3"
.TH SOAP::WSDL::Generator::Iterator::WSDL11 3 "2010-10-06" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SOAP::WSDL::Generator::Iterator::WSDL11 \- WSDL 1.1 Iterator
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\& my $iter = SOAP::WSDL::Generator::Iterator::WSDL11\->new({
\&     definitions => $wsdl
\& });
\& $iter\->init();
\& while (my $node = $iter\->get_next()) {
\&     # do something with node \- possibly call _accept with a visitor on it...
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Iterator for walking a \s-1WSDL\s0 1.1 definition.
.PP
The iterator performs a depth-first search along the following path:
.PP
.Vb 8
\& service
\& port
\& binding
\& operation
\& input/output/fault of operation in portType
\& message
\& part
\& type/element in XML schema
.Ve
.PP
If you wonder about this path: This is how to look up which \s-1XML\s0 Schema element
is associated with a operation from a service/port.
.SS "Example"
.IX Subsection "Example"
The nodes are returned in the order denoted in the following example:
.PP
.Vb 10
\& <?xml version="1.0" encoding="UTF\-8"?>
\& <!\-\- 1 \-\->
\& <definitions xmlns:http="http://schemas.xmlsoap.org/wsdl/http/"
\&   xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
\&   xmlns:s="http://www.w3.org/2001/XMLSchema" xmlns:s0="urn:HelloWorld"
\&   targetNamespace="urn:HelloWorld"
\&   xmlns="http://schemas.xmlsoap.org/wsdl/">
\&   <types>
\&     <s:schema elementFormDefault="qualified" targetNamespace="urn:HelloWorld">
\&       <!\-\- 9 \-\->
\&       <s:element name="sayHello">
\&         <s:complexType>
\&            <s:sequence>
\&              <s:element minOccurs="0" maxOccurs="1" name="name" type="s:string" />
\&              <s:element minOccurs="0" maxOccurs="1" name="givenName" type="s:string" nillable="1" />
\&            </s:sequence>
\&            <s:attribute name="testAttr" type="s:string" use="optional"></s:attribute>
\&          </s:complexType>
\&        </s:element>
\&
\&        <!\-\- 13 \-\->
\&        <s:element name="sayHelloResponse">
\&          <s:complexType>
\&            <s:sequence>
\&              <s:element minOccurs="0" maxOccurs="1"
\&                name="sayHelloResult" type="s:string" />
\&           </s:sequence>
\&         </s:complexType>
\&       </s:element>
\&     </s:schema>
\&   </types>
\&
\&   <!\-\- 7 \-\->
\&   <message name="sayHelloSoapIn">
\&     <!\-\- 8 \-\->
\&     <part name="parameters" element="s0:sayHello" />
\&   </message>
\&
\&   <!\-\- 11 \-\->
\&   <message name="sayHelloSoapOut">
\&     <!\-\- 12 \-\->
\&     <part name="parameters" element="s0:sayHelloResponse" />
\&   </message>
\&
\&   <portType name="Service1Soap">
\&     <operation name="sayHello">
\&     <!\-\- 6 \-\->
\&     <input message="s0:sayHelloSoapIn" />
\&     <!\-\- 10 \-\->
\&     <output message="s0:sayHelloSoapOut" />
\&   </operation>
\&  </portType>
\&
\&    <!\-\- 4 \-\->
\&    <binding name="Service1Soap" type="s0:Service1Soap">
\&        <soap:binding transport="http://schemas.xmlsoap.org/soap/http"
\&            style="document" />
\&
\&        <!\-\- 5 \-\->
\&        <operation name="sayHello">
\&            <soap:operation soapAction="urn:HelloWorld#sayHello"
\&                style="document" />
\&
\&            <input>
\&                <soap:body use="literal" />
\&            </input>
\&
\&            <output>
\&                <soap:body use="literal" />
\&            </output>
\&        </operation>
\&    </binding>
\&
\&    <!\-\- 2 \-\->
\&    <service name="Service1">
\&        <!\-\- 3 \-\->
\&        <port name="Service1Soap" binding="s0:Service1Soap">
\&            <soap:address
\&                location="http://localhost:81/soap\-wsdl\-test/helloworld.pl" />
\&        </port>
\&    </service>
\& </definitions>
.Ve
.PP
You should not rely too much on this order \- it may change. Even though the
current order will probably remain, the nodes currently skipped might
be returned somewhere along the path.
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2004\-2008 Martin Kutter.
.PP
This file is part of SOAP-WSDL. You may distribute/modify it under
the same terms as perl itself
.SH "AUTHOR"
.IX Header "AUTHOR"
Martin Kutter <martin.kutter fen\-net.de>
.SH "REPOSITORY INFORMATION"
.IX Header "REPOSITORY INFORMATION"
.Vb 4
\& $Rev: 239 $
\& $LastChangedBy: kutterma $
\& $Id: Client.pm 239 2007\-09\-11 09:45:42Z kutterma $
\& $HeadURL: https://soap\-wsdl.svn.sourceforge.net/svnroot/soap\-wsdl/SOAP\-WSDL/trunk/lib/SOAP/WSDL/Client.pm $
.Ve
