.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SOAP::WSDL::Server::Mod_Perl2 3"
.TH SOAP::WSDL::Server::Mod_Perl2 3 "2010-10-06" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SOAP::WSDL::Server::Mod_Perl2 \- mod_perl based SOAP server using SOAP::WSDL
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Perl module providing a mod_perl2\-based \s-1SOAP\s0 server using \s-1SOAP::WSDL\s0
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
Configuration is managed through the use of PerlSetVar directives.
The following variables are available:
.SS "dispatch_to"
.IX Subsection "dispatch_to"
Takes as a single argument the package name of the module which contains
the methods which handle \s-1SOAP\s0 requests.
.PP
.Vb 1
\& PerlSetVar dispatch_to "WebPackage::SOAPMethods"
.Ve
.SS "soap_service"
.IX Subsection "soap_service"
Takes as a single argument the package name of the Server module
generated by \s-1SOAP::WSDL\s0 using
.PP
.Vb 1
\& wsdl2perl.pl \-\-server file:///path/to/your/wsdl
.Ve
.PP
By default, the name of the package is MyServer::$SERVICENAME::$PORTTYPE.
.PP
\&\s-1EXAMPLE:\s0 Given this sample \s-1WSDL\s0 which wsdl2perl.pl was run against to generate
perl packages:
.PP
.Vb 3
\&    <wsdl:portType name="WebServiceSoap">
\&        [...]
\&    </wsdl:portType>
\&
\&    [...]
\&
\&    <wsdl:service name="WebService">
\&        <wsdl:port name="WebServiceSoap" binding="tns:WebServiceSoap">
\&            <soap:address location="http://www.example.com/WebService"/>
\&        </wsdl:port>
\&    </wsdl:service>
.Ve
.PP
The following directive would be correct:
.PP
.Vb 1
\&    PerlSetVar soap_service "MyServer::WebService::WebServiceSoap"
.Ve
.SS "transport_class [\s-1OPTIONAL\s0]"
.IX Subsection "transport_class [OPTIONAL]"
Takes as a single argument the package name of the perl module containing a
\&\fIhandle()\fR method used to assemble the \s-1HTTP\s0 request which will be passed to the
methods in your dispatch_to module (see above). A default \fIhandle()\fR method
is supplied in this module which should handle most common cases.
.PP
\&\fIhandle()\fR is called with the following parameters:
.PP
.Vb 1
\& $r \- Apache::RequestRec object
.Ve
.SH "EXAMPLES"
.IX Header "EXAMPLES"
The following snippet added to httpd.conf will enable a \s-1SOAP\s0 server at
/WebService on your webserver:
.PP
.Vb 6
\&    <Location /WebService>
\&        SetHandler perl\-script
\&        PerlResponseHandler SOAP::WSDL::Server::Mod_Perl2
\&        PerlSetVar dispatch_to "WebPackage::SOAPMethods"
\&        PerlSetVar soap_service "MyServer::WebService::WebServiceSoap"
\&    </Location>
.Ve
.SH "PERFORMANCE"
.IX Header "PERFORMANCE"
On my machine, a simple \s-1SOAP\s0 server (the HelloWorld service from the examples)
needs around 20s to process 300 requests to a \s-1CGI\s0 script implemented with
SOAP::WSDL::Server::CGI, around 4.5s to the same \s-1CGI\s0 with mod_perl enabled,
and around 3.2s with SOAP::WSDL::Server::Mod_Perl2. All these figures
include the time for creating the request and parsing the response.
.PP
As general advice, using mod_perl is highly recommended in high-performance
environments. Using SOAP::WSDL::Server::Mod_Perl2 yields an extra 20% speedup
compared with mod_perl enabled \s-1CGI\s0 scripts \- and it allows one to configure
\&\s-1SOAP\s0 servers in the Apache config.
.SH "THREAD SAFETY"
.IX Header "THREAD SAFETY"
\&\s-1SOAP::WSDL\s0 uses Class::Std::Fast, which is not guaranteed to be threadsafe
yet. Thread safety in Class::Std::Fast is dependent on whether
.PP
.Vb 1
\& my $foo = $bar++;
.Ve
.PP
is an atomic operation. I haven't found out yet.
.PP
A load test on a single \s-1CPU\s0 machine with 4 clients using the worker mpm
did not reveal any threading issues \- but that does not mean there are none.
.SH "CREDITS"
.IX Header "CREDITS"
Contributed (along with lots of other little improvements) by Noah Robin.
.PP
Thanks!
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
This file is part of SOAP-WSDL. You may distribute/modify it under
the same terms as perl itself
.SH "AUTHOR"
.IX Header "AUTHOR"
Noah Robin <noah.robin gmail.com>
.PP
Based on SOAP::WSDL::Server::CGI, by Martin Kutter <martin.kutter fen\-net.de>
.SH "REPOSITORY INFORMATION"
.IX Header "REPOSITORY INFORMATION"
.Vb 4
\& $Rev: 583 $
\& $LastChangedBy: kutterma $
\& $Id: $
\& $HeadURL: $
.Ve
